import { c as create_ssr_component } from "./ssr.js";
const metadata = {
  "layout": "post",
  "title": "Why I chose Svelte for my new app",
  "date": "2021-05-14T00:00:00.000Z",
  "image": "bnt-1.png",
  "keywords": "svelte, fe, js, ts, bnt",
  "hn": "https://news.ycombinator.com/item?id=27166097"
};
const Why_svelte = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p data-svelte-h="svelte-1syuky6">I recently published <a href="https://apps.apple.com/us/app/beautiful-new-tabs/id1567068235" rel="nofollow">Beautiful New Tabs</a>. It replaces the new tab page in Safari with a nice wallpaper and weather widget.</p>  <p data-svelte-h="svelte-1qdl7de">While it uses Swift to download and cache wallpapers in the background, everything in the new tab page is HTML, CSS and JS. That’s how you make <a href="https://developer.mozilla.org/en-US/docs/Glossary/WebExtensions" rel="nofollow">web extensions</a>, which Safari <a href="https://sixcolors.com/post/2021/01/safari-14-added-webextensions-support-so-where-are-the-extensions/" rel="nofollow">now supports</a>.</p> <p data-svelte-h="svelte-f30zhl">After building a prototype in vanilla JS, I switched Beautiful New Tabs to <a href="https://svelte.dev" rel="nofollow">Svelte</a> and am happy with the results.</p> <h2 data-svelte-h="svelte-9joj1b">v1: Vanilla JS</h2> <p data-svelte-h="svelte-1ubs82">The first version was vanilla JS filling in an HTML page. Displaying a wallpaper seemed too small for a framework.</p> <p data-svelte-h="svelte-1aiwahg">I also wanted the wallpaper to appear as quickly as possible. Cmd-T, see wallpaper. Cmd-N, see wallpaper. Even though Safari reads my JS bundle from file, not over the network, the bundle should still be small.</p> <p data-svelte-h="svelte-1y7dcr5">The problem was my vanilla JS got imperative and messy, especially when I started adding features. The weather widget alone made me look for a new solution.</p> <h2 data-svelte-h="svelte-1ure6fn">v2: Svelte</h2> <p data-svelte-h="svelte-1sc6zm2">I had read about Svelte and realized it was perfect for my use case. <a href="https://dev.to/joshnuss/svelte-compiler-under-the-hood-4j20" rel="nofollow">Svelte is a compiler</a> that turns declarative <code>.svelte</code> files into imperative, DOM-updating JS. With Svelte, I could break my application into reusable, declarative components and still ship a tiny bundle to customers. [^1]</p> <p data-svelte-h="svelte-16ghu8v">[^1]: I could have used <a href="https://dev.to/hanna/why-svelte-is-revolutionary-415e" rel="nofollow">another framework with small minified bundles</a>, but I wanted to try a cool new tool :).</p> <p data-svelte-h="svelte-rm4sqs">And you know what? Svelte worked like a charm.</p> <ul data-svelte-h="svelte-1a2omet"><li><strong>Source code (TypeScript classes and Svelte components)</strong>: 16 KB</li> <li><strong>Output bundle (minified)</strong>: 16 KB</li></ul> <p data-svelte-h="svelte-1kxrb4z">No extra KBs of data for a framework. It’s 16 KB because the app requires 16 KB of source code to juggle two APIs and a local cache. The bundle loads instantly.</p> <h2 data-svelte-h="svelte-1du2dd6">ty, Svelte</h2> <p data-svelte-h="svelte-12hdi6b">Svelte is new and still has rough edges, but I would recommend it as a way to write “vanilla” JS with the advantages of a framework.</p>`;
});
export {
  Why_svelte as default,
  metadata
};
