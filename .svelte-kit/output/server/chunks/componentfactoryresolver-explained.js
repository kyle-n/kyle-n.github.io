import { c as create_ssr_component } from "./ssr.js";
const metadata = {
  "layout": "post",
  "title": "How ComponentFactoryResolver can unlock powerful higher-order components",
  "date": "2022-06-30T00:00:00.000Z",
  "keywords": "javascript, typescript, angular, frontend",
  "image": "factory.png",
  "caption": "Via ArtsyBee on Pixabay"
};
const Componentfactoryresolver_explained = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p data-svelte-h="svelte-138kwrz">If you work with any component-based framework long enough, you’ll run into a problem. How do you share functionality across components?</p> <p data-svelte-h="svelte-1grz76d">Angular gives us many options. You can share logic in services, child components or directives. However, sometimes these options are not enough. A directive can only modify an element, a service cannot display content, and a child component should not modify its parent.</p> <p data-svelte-h="svelte-17905ez">Sometimes, the best option is to build a <a href="https://reactjs.org/docs/higher-order-components.html" rel="nofollow">higher-order component</a>. A higher-order component accepts another component as its input and “wraps” it. This is a common pattern in React and a great way to share logic across components without burdening them with extra service dependencies or logic.</p> <p data-svelte-h="svelte-1vu00h0">With a little help from <code>ComponentFactoryResolver</code>, we can do this in Angular too.</p> <h2 data-svelte-h="svelte-ghgwjv">Why use ComponentFactoryResolver?</h2> <p data-svelte-h="svelte-f974ev">Imagine you’re creating a dashboard with two tables, each with a different layout. As indicated below, the top table is for transactions, and the bottom table is for users.</p> <p data-svelte-h="svelte-i6uo06"><img src="/static/img/transaction-table.png" alt="A screenshot of a table showing two transactions. It has columns for transaction ID, amount and details"></p> <p data-svelte-h="svelte-1k3r2z5"><img src="/static/img/user-table.png" alt="A screenshot of a table showing two users. It has columns for user name and salary"></p> <p data-svelte-h="svelte-iny8h1">The <strong>transactions table</strong> has checkboxes and three columns showing a number, currency and date, respectively. While the <strong>user table</strong> also has a checkbox, it displays only two additional columns, the first rendering a string and the second a currency value. </p> <p data-svelte-h="svelte-vexz1n">On one hand, the checkbox logic for each table is the same and should be shared. On the other, how would you reconcile two radically different row layouts?</p> <p data-svelte-h="svelte-3qx1p5">You could toggle between them with a switch statement, but the code would messy, large, and unreadable. And that’s before adding more columns in the future.</p> <p data-svelte-h="svelte-1w3vb6u">What we should do instead is create a higher-order checkbox table component that accepts a row component class as its input. This is how simple our final API will be:</p> <pre class="language-html"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-selectable-table</span> 
  <span class="token attr-name">[items]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactions<span class="token punctuation">"</span></span>
  <span class="token attr-name">[rowComponent]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TransactionRowComponent<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-selectable-table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css">...</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-selectable-table</span>
  <span class="token attr-name">[items]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span>
  <span class="token attr-name">[rowComponent]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserRowComponent<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-selectable-table</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1cyifv"><code>ComponentFactoryResolver</code> will let us write our checkbox logic once and dynamically render row components at runtime. </p> <h2 data-svelte-h="svelte-ic14yu">Creating the Component UsingComponentFactoryResolver and ViewContainerRef</h2> <p data-svelte-h="svelte-jp5pwj">The table will create instances of our row component and render them into a <code>ViewContainerRef</code>s attached to <code>&lt;tr&gt;</code>s in our template. A <code>ViewContainerRef</code> is a container where one or more views can be attached, resulting in a <a href="https://angular.io/api/core/ViewContainerRef#description" title="https://angular.io/api/core/ViewContainerRef#description" rel="nofollow"><em>host views</em></a><em>. </em>A host view is a view for the component containing its data. This is how Angular creates and renders components behind the scenes.</p> <p data-svelte-h="svelte-zcwo06">To return to our table example, we will pass in two inputs: the row component class and an array of items to render.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> items<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Identifiable<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> rowComponent<span class="token operator">:</span> SelectableTableRowComponent<span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-vpixf1">We will inject our row component into the <code>ViewContainerRef</code> of each <code>&lt;tr&gt;</code>. Each row will display one item.</p> <pre class="language-html"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let header of rowComponent.tableHeaders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          &#123;&#123;header&#125;&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbodv</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">#selectableRow</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let item of items<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div-table-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChildren</span></span><span class="token punctuation">(</span><span class="token string">'selectableRow'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> read<span class="token operator">:</span> ViewContainerRef <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> rowTemplates<span class="token operator">:</span> QueryList<span class="token operator">&lt;</span>ViewContainerRef<span class="token operator">></span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-57tc65">We will inject our row component into the <code>ViewContainerRef</code> of each <code>&lt;tr&gt;</code>. Each row will display one item.The <code>ComponentFactoryResolver</code> will resolve a factory for making <code>rowComponent</code>instances. We will then assign the <code>items</code> of the table to <code>instance.item</code>. Finally, using the instance of the global Angular project, we will render the row component instance onto the page.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token keyword">const</span> rowComponentFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_componentFactoryResolver<span class="token punctuation">.</span><span class="token function">resolveComponentFactory</span><span class="token punctuation">(</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>rowComponent
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> componentRef <span class="token operator">=</span> rowComponentFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
  <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  template<span class="token punctuation">.</span>element<span class="token punctuation">.</span>nativeElement
<span class="token punctuation">)</span><span class="token punctuation">;</span>
componentRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_applicationRef<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span>componentRef<span class="token punctuation">.</span>hostView<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-14jdfpg">Content Projection</h2> <p data-svelte-h="svelte-1gnf4f1">Our table can now render the row components needed to display users and transactions. Now we need to display the checkboxes using <code>ngContent</code> inside our user row component.</p> <pre class="language-html"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>&#123;&#123; item.name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; item.pay | currency &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1l310cp">Back in the table component, make a <code>&lt;td&gt;</code>. You will inject the checkbox component into the <code>&lt;td&gt;</code>.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token keyword">const</span> checkboxTd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>'td"<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> checkboxRef <span class="token operator">=</span> checkboxFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
  <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  checkboxTd
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1prvjee">We will need some logic to know if the checkbox is checked.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token keyword">const</span> itemId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
checkboxRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>formControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemsSelected<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  itemId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">as</span> FormControl<span class="token punctuation">;</span>
checkboxRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>itemId<span class="token punctuation">)</span><span class="token punctuation">;</span>
checkboxRef<span class="token punctuation">.</span>hostView<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-u1jlo9">We now pass the checkbox as the second parameter for <code>projectableNodes</code>.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_componentFactoryResolver<span class="token punctuation">.</span><span class="token function">resolveComponentFactory</span><span class="token punctuation">(</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>rowComponent
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> componentRef <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>checkboxTd<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token punctuation">.</span>element<span class="token punctuation">.</span>nativeElement
<span class="token punctuation">)</span><span class="token punctuation">;</span>
componentRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_applicationRef<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span>componentRef<span class="token punctuation">.</span>hostView<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1iji6b">Putting this all together, we will have this block of code.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript">templates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>template<span class="token operator">:</span> ViewContainerRef<span class="token punctuation">,</span> i<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> checkboxTd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> checkboxRef <span class="token operator">=</span> checkboxFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
    template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
    <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    checkboxTd
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> itemId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
  checkboxRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>formControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemsSelected<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
    itemId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token keyword">as</span> FormControl<span class="token punctuation">;</span>
  checkboxRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>itemId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  checkboxRef<span class="token punctuation">.</span>hostView<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_componentFactoryResolver<span class="token punctuation">.</span><span class="token function">resolveComponentFactory</span><span class="token punctuation">(</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rowComponent
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> componentRef <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
    template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>checkboxTd<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    template<span class="token punctuation">.</span>element<span class="token punctuation">.</span>nativeElement
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  componentRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_applicationRef<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span>componentRef<span class="token punctuation">.</span>hostView<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-17btork">The result of all this is our table that we can plug into and use throughout our application using <code>ComponentFactoryResolver</code>.</p> <pre class="language-html"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-selectable-table</span> 
  <span class="token attr-name">[items]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactions<span class="token punctuation">"</span></span>
  <span class="token attr-name">[rowComponent]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TransactionRowComponent<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-selectable-table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css">...</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-selectable-table</span>
  <span class="token attr-name">[items]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span>
  <span class="token attr-name">[rowComponent]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserRowComponent<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-selectable-table</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-uktws0">Using ComponentFactoryResolver in Angular 13</h2> <p data-svelte-h="svelte-1hwv03">Angular 13 and newer no longer requires component factories. You can just inject an instance of a component class directly into a <code>ViewContainerRef</code>.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">,</span> ViewChild<span class="token punctuation">,</span> ViewContainerRef<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>SelectableTableRowCheckboxComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../selectable-table-row-checkbox/selectable-table-row-checkbox.component'</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-factory-example'</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token string">'&lt;button (click)="add()">Add checkbox&lt;/button>&lt;ng-container #container>&lt;/ng-container>'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FactoryExampleComponent</span> <span class="token punctuation">&#123;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>read<span class="token operator">:</span> ViewContainerRef<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> container<span class="token operator">:</span> ViewContainerRef<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> componentRef <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>SelectableTableRowCheckboxComponent
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre>`;
});
export {
  Componentfactoryresolver_explained as default,
  metadata
};
