import { c as create_ssr_component } from "./ssr.js";
const metadata = {
  "layout": "post",
  "title": "What’s New in RxJS 7&#58; Small Bundles and Big Changes to share",
  "date": "2021-06-02T00:00:00.000Z",
  "keywords": "javascript, typescript, rxjs",
  "image": "rxjs-logo.png"
};
const Rxjs_7_changes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p data-svelte-h="svelte-1qfwrid">RxJS 7 has shipped! For us Angular developers, it unfortunately did not ship in time for Angular 12.</p> <p data-svelte-h="svelte-19hg9rf">I’ve summarized key takeaways from Ben Lesh’s talk from RxJS Live Asia and his slides below. Lesh is a member of the RxJS core team and formerly worked at Google on the Angular team.</p> <h2 data-svelte-h="svelte-1ioy6je">Big Feature: Smaller Bundle Sizes</h2> <p data-svelte-h="svelte-13l79m1">Lesh said while RxJS 7 was “a bit faster,” the big improvement for the new version is its bundle size. RxJS 7 is 53% the size of RxJS 6. If your app used every operator in version 6, that would require 52 KB, but the same thing in RxJS 7 requires just 19 KB.</p> <p data-svelte-h="svelte-1cqiq31">“This was done via a refactor, a hundred-point improvement of going around and individually moving around code, keeping the same tests, keeping the same code, and moving things around slowly but surely until we got to a place where we could see daylight and we were able to refactor larger portions of the code,” Lesh said in his talk.</p> <p data-svelte-h="svelte-1u43pqo">See this chart of operator sizes in RxJS 6:</p> <p data-svelte-h="svelte-1374mlo"><img src="/static/img/rxjs6-size.png" alt="A chart showing the size of different RxJS 6 operators"></p> <p data-svelte-h="svelte-165yzw0">And this chart of the same operator sizes in RxJS 7:</p> <p data-svelte-h="svelte-52r4cc"><img src="/static/img/rxjs7-size.png" alt="A chart showing the size of different RxJS 7 operators"></p> <h2 data-svelte-h="svelte-plbtc7">Consolidating Sharing operators</h2> <p data-svelte-h="svelte-mxaqqi">Lesh’s talk includes a long discussion about how many ways RxJS lets you share a stream (<code>multicast</code>, <code>shareReplay</code>, <code>refCount</code>, etc).</p> <p data-svelte-h="svelte-150t1rj">RxJS 7 deprecates <code>multicast</code>, <code>publish</code>, <code>publishReplay</code>, <code>publishLast</code>, and <code>refCount</code>. <code>shareReplay</code> was too popular to deprecate in 7, but Lesh said it’s next because it is “full of footguns.” Long term, the only sharing operators will be <code>share</code>, <code>connect</code> and <code>connectable</code>. He recommends moving to <code>share</code> now.</p> <p data-svelte-h="svelte-186goe0"><code>share</code> is picking up some new features as the single solution operator. It takes an optional config object as a parameter, where you can define custom behavior for the stream.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">connector</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">ReplaySubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  resetOnRefCountZero<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  resetOnComplete<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  resetOnError<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-kt6rw9">Better TypeScript Typings</h2> <p data-svelte-h="svelte-1sxl4ya">RxJS 7 <a href="https://github.com/ReactiveX/rxjs/blob/6bd1c5f3cf0e387973b44698c48bc933e8c528aa/package.json#L9" rel="nofollow">requires TypeScript 4.2</a>, Lesh said, because it contains features that enable more accurate, stricter types. One example he gave in his slides involved <code>Subject</code>:</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token comment">// allowed in RxJS 6, errors in 7 because next() must be called with a number</span>
<span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1bkffhx">For teams that are unable to upgrade to TypeScript 4.2, Lesh recommended staying on RxJS 6, which the RxJS team will continue to support.</p> <h3 data-svelte-h="svelte-1kpkpjp"><code>toPromise()</code> Deprecated</h3> <p data-svelte-h="svelte-1ttvmki">The problem with <code>toPromise()</code>, Lesh explained, was that it didn’t make sense with Observables. Should a promise created by <code>toPromise()</code> resolve with the first or last value emitted from the source Observable?</p> <p data-svelte-h="svelte-1gwjwtd">So, <code>toPromise()</code> is deprecated in favor of <code>lastValueFrom()</code> and <code>firstValueFrom()</code>. These new functions still convert Observables to Promises, but in a way that clarifies that value the Promise will resolve with.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> firstVal <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstValueFrom</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstVal<span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token keyword">const</span> lastVal <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lastValueFrom</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastVal<span class="token punctuation">)</span> <span class="token comment">// 2</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-4irlao">If an Observable completes without emitting a value, the Promise created by <code>lastValueFrom</code> or <code>firstValueFromrejects</code>. If that is not desired behavior, you can configure the new Promise to resolve with a defaultValue.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token keyword">const</span> emptyVal <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstValueFrom</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> defaultValue<span class="token operator">:</span> <span class="token string">'empty'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emptyVal<span class="token punctuation">)</span> <span class="token comment">// 'empty'</span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-1uyjkwl">AsyncIterable support</h2> <p data-svelte-h="svelte-6wjk19">Anywhere you can pass an Observable, RxJS 7 also lets you pass an AsyncIterable.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">ticket</span><span class="token punctuation">(</span>delay<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-3975wq">Other Updates</h2> <p data-svelte-h="svelte-gka8td">- <code>finalize()</code> operators now run in the order in which they are written in <code>pipe()</code>. In contrast, RxJS 6 ran them in reverse.
- <code>subscription.add(someSubscription)</code> now returns void so people will stop writing <code>add()</code> chains, which Lesh says never worked.</p> <pre class="language-typescript"><!-- HTML_TAG_START -->${`<code class="language-typescript"><span class="token comment">// add() returns void, cannot be chained</span>

subscription
  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subOne<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subTwo<span class="token punctuation">)</span> <span class="token comment">// errors</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-rlnrsi">- <code>animationFrames()</code> creates Observables to do animation logic reactively
- <code>switchScan()</code> operator, aka <code>switchMap</code> with an accumulator
- <code>throwError()</code> requires a callback, not an error, as the error captures the current stack at the moment of its creation</p> <h3 data-svelte-h="svelte-plo88p">Your <code>with</code> Is My Command</h3> <p data-svelte-h="svelte-eadsp6">- <code>combineLatest</code> operator renamed to <code>combineLatestWith</code>
- <code>merge</code> operator renamed to <code>mergeWith</code></p> <ul data-svelte-h="svelte-18sy8y4"><li><code>zip</code> operator renamed to <code>zipWith</code></li> <li><code>race</code> operator renamed to <code>raceWith</code></li> <li><code>concat</code> operator renamed to <code>concatWith</code></li></ul> <h2 data-svelte-h="svelte-1ibsc2p">Bitovi Recommendations for Migrating to RxJS 7</h2> <p data-svelte-h="svelte-p62h35">If your project can be upgraded to RxJS 7, we would recommend doing so. The speed and bundle size improvements offer tangible, immediate benefits to end users.</p> <p data-svelte-h="svelte-10oyolp">Important points to remember:</p> <ul data-svelte-h="svelte-1bjrcnl"><li>Replace your <code>toPromise</code> calls with <code>firstValueFrom</code> and <code>lastValueFrom</code></li> <li>Replace your <code>shareReplay</code> calls with <code>share</code></li> <li>Stop using <code>.add</code> chains to manage your subscriptions. Lesh <a href="https://medium.com/@benlesh/rxjs-dont-unsubscribe-6753ed4fda87" rel="nofollow">recommends <code>takeUntil</code></a></li></ul>`;
});
export {
  Rxjs_7_changes as default,
  metadata
};
