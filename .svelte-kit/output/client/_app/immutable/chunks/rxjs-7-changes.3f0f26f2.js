import{s as gt,n as Ae}from"./scheduler.63274e7e.js";import{S as jt,i as Jt,g as a,s as l,H as D,h as o,x as i,c as p,j as G,A as N,f as t,k as X,a as n}from"./index.9f372ec1.js";function Vt(Lt){let c,Ie="RxJS 7 has shipped! For us Angular developers, it unfortunately did not ship in time for Angular 12.",Y,u,Be="I’ve summarized key takeaways from Ben Lesh’s talk from RxJS Live Asia and his slides below. Lesh is a member of the RxJS core team and formerly worked at Google on the Angular team.",Q,r,We="Big Feature: Smaller Bundle Sizes",$,d,Ue="Lesh said while RxJS 7 was “a bit faster,” the big improvement for the new version is its bundle size. RxJS 7 is 53% the size of RxJS 6. If your app used every operator in version 6, that would require 52 KB, but the same thing in RxJS 7 requires just 19 KB.",ee,k,Ke="“This was done via a refactor, a hundred-point improvement of going around and individually moving around code, keeping the same tests, keeping the same code, and moving things around slowly but surely until we got to a place where we could see daylight and we were able to refactor larger portions of the code,” Lesh said in his talk.",te,m,Ze="See this chart of operator sizes in RxJS 6:",se,f,De='<img src="/static/img/rxjs6-size.png" alt="A chart showing the size of different RxJS 6 operators"/>',ne,h,Ge="And this chart of the same operator sizes in RxJS 7:",ae,v,Ne='<img src="/static/img/rxjs7-size.png" alt="A chart showing the size of different RxJS 7 operators"/>',oe,x,Xe="Consolidating Sharing operators",le,w,Ye="Lesh’s talk includes a long discussion about how many ways RxJS lets you share a stream (<code>multicast</code>, <code>shareReplay</code>, <code>refCount</code>, etc).",pe,b,Qe="RxJS 7 deprecates <code>multicast</code>, <code>publish</code>, <code>publishReplay</code>, <code>publishLast</code>, and <code>refCount</code>. <code>shareReplay</code> was too popular to deprecate in 7, but Lesh said it’s next because it is “full of footguns.” Long term, the only sharing operators will be <code>share</code>, <code>connect</code> and <code>connectable</code>. He recommends moving to <code>share</code> now.",ie,y,$e="<code>share</code> is picking up some new features as the single solution operator. It takes an optional config object as a parameter, where you can define custom behavior for the stream.",ce,C,ue,Ht=`<code class="language-typescript"><span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">connector</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">ReplaySubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  resetOnRefCountZero<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  resetOnComplete<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  resetOnError<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,re,_,et="Better TypeScript Typings",de,L,tt='RxJS 7 <a href="https://github.com/ReactiveX/rxjs/blob/6bd1c5f3cf0e387973b44698c48bc933e8c528aa/package.json#L9" rel="nofollow">requires TypeScript 4.2</a>, Lesh said, because it contains features that enable more accurate, stricter types. One example he gave in his slides involved <code>Subject</code>:',ke,H,me,Tt=`<code class="language-typescript"><span class="token comment">// allowed in RxJS 6, errors in 7 because next() must be called with a number</span>
<span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,fe,T,st="For teams that are unable to upgrade to TypeScript 4.2, Lesh recommended staying on RxJS 6, which the RxJS team will continue to support.",he,S,nt="<code>toPromise()</code> Deprecated",ve,R,at="The problem with <code>toPromise()</code>, Lesh explained, was that it didn’t make sense with Observables. Should a promise created by <code>toPromise()</code> resolve with the first or last value emitted from the source Observable?",xe,P,ot="So, <code>toPromise()</code> is deprecated in favor of <code>lastValueFrom()</code> and <code>firstValueFrom()</code>. These new functions still convert Observables to Promises, but in a way that clarifies that value the Promise will resolve with.",we,M,be,St=`<code class="language-typescript"><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> firstVal <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstValueFrom</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstVal<span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token keyword">const</span> lastVal <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lastValueFrom</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastVal<span class="token punctuation">)</span> <span class="token comment">// 2</span></code>`,ye,g,lt="If an Observable completes without emitting a value, the Promise created by <code>lastValueFrom</code> or <code>firstValueFromrejects</code>. If that is not desired behavior, you can configure the new Promise to resolve with a defaultValue.",Ce,j,_e,Rt=`<code class="language-typescript"><span class="token keyword">const</span> emptyVal <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstValueFrom</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> defaultValue<span class="token operator">:</span> <span class="token string">'empty'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emptyVal<span class="token punctuation">)</span> <span class="token comment">// 'empty'</span></code>`,Le,J,pt="AsyncIterable support",He,V,it="Anywhere you can pass an Observable, RxJS 7 also lets you pass an AsyncIterable.",Te,z,Se,Pt=`<code class="language-typescript"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">ticket</span><span class="token punctuation">(</span>delay<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Re,E,ct="Other Updates",Pe,F,ut=`- <code>finalize()</code> operators now run in the order in which they are written in <code>pipe()</code>. In contrast, RxJS 6 ran them in reverse.
- <code>subscription.add(someSubscription)</code> now returns void so people will stop writing <code>add()</code> chains, which Lesh says never worked.`,Me,q,ge,Mt=`<code class="language-typescript"><span class="token comment">// add() returns void, cannot be chained</span>

subscription
  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subOne<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subTwo<span class="token punctuation">)</span> <span class="token comment">// errors</span></code>`,je,O,rt=`- <code>animationFrames()</code> creates Observables to do animation logic reactively
- <code>switchScan()</code> operator, aka <code>switchMap</code> with an accumulator
- <code>throwError()</code> requires a callback, not an error, as the error captures the current stack at the moment of its creation`,Je,A,dt="Your <code>with</code> Is My Command",Ve,I,kt=`- <code>combineLatest</code> operator renamed to <code>combineLatestWith</code>
- <code>merge</code> operator renamed to <code>mergeWith</code>`,ze,B,mt="<li><code>zip</code> operator renamed to <code>zipWith</code></li> <li><code>race</code> operator renamed to <code>raceWith</code></li> <li><code>concat</code> operator renamed to <code>concatWith</code></li>",Ee,W,ft="Bitovi Recommendations for Migrating to RxJS 7",Fe,U,ht="If your project can be upgraded to RxJS 7, we would recommend doing so. The speed and bundle size improvements offer tangible, immediate benefits to end users.",qe,K,vt="Important points to remember:",Oe,Z,xt='<li>Replace your <code>toPromise</code> calls with <code>firstValueFrom</code> and <code>lastValueFrom</code></li> <li>Replace your <code>shareReplay</code> calls with <code>share</code></li> <li>Stop using <code>.add</code> chains to manage your subscriptions. Lesh <a href="https://medium.com/@benlesh/rxjs-dont-unsubscribe-6753ed4fda87" rel="nofollow">recommends <code>takeUntil</code></a></li>';return{c(){c=a("p"),c.textContent=Ie,Y=l(),u=a("p"),u.textContent=Be,Q=l(),r=a("h2"),r.textContent=We,$=l(),d=a("p"),d.textContent=Ue,ee=l(),k=a("p"),k.textContent=Ke,te=l(),m=a("p"),m.textContent=Ze,se=l(),f=a("p"),f.innerHTML=De,ne=l(),h=a("p"),h.textContent=Ge,ae=l(),v=a("p"),v.innerHTML=Ne,oe=l(),x=a("h2"),x.textContent=Xe,le=l(),w=a("p"),w.innerHTML=Ye,pe=l(),b=a("p"),b.innerHTML=Qe,ie=l(),y=a("p"),y.innerHTML=$e,ce=l(),C=a("pre"),ue=new D(!1),re=l(),_=a("h2"),_.textContent=et,de=l(),L=a("p"),L.innerHTML=tt,ke=l(),H=a("pre"),me=new D(!1),fe=l(),T=a("p"),T.textContent=st,he=l(),S=a("h3"),S.innerHTML=nt,ve=l(),R=a("p"),R.innerHTML=at,xe=l(),P=a("p"),P.innerHTML=ot,we=l(),M=a("pre"),be=new D(!1),ye=l(),g=a("p"),g.innerHTML=lt,Ce=l(),j=a("pre"),_e=new D(!1),Le=l(),J=a("h2"),J.textContent=pt,He=l(),V=a("p"),V.textContent=it,Te=l(),z=a("pre"),Se=new D(!1),Re=l(),E=a("h2"),E.textContent=ct,Pe=l(),F=a("p"),F.innerHTML=ut,Me=l(),q=a("pre"),ge=new D(!1),je=l(),O=a("p"),O.innerHTML=rt,Je=l(),A=a("h3"),A.innerHTML=dt,Ve=l(),I=a("p"),I.innerHTML=kt,ze=l(),B=a("ul"),B.innerHTML=mt,Ee=l(),W=a("h2"),W.textContent=ft,Fe=l(),U=a("p"),U.textContent=ht,qe=l(),K=a("p"),K.textContent=vt,Oe=l(),Z=a("ul"),Z.innerHTML=xt,this.h()},l(e){c=o(e,"P",{"data-svelte-h":!0}),i(c)!=="svelte-1qfwrid"&&(c.textContent=Ie),Y=p(e),u=o(e,"P",{"data-svelte-h":!0}),i(u)!=="svelte-19hg9rf"&&(u.textContent=Be),Q=p(e),r=o(e,"H2",{"data-svelte-h":!0}),i(r)!=="svelte-1ioy6je"&&(r.textContent=We),$=p(e),d=o(e,"P",{"data-svelte-h":!0}),i(d)!=="svelte-13l79m1"&&(d.textContent=Ue),ee=p(e),k=o(e,"P",{"data-svelte-h":!0}),i(k)!=="svelte-1cqiq31"&&(k.textContent=Ke),te=p(e),m=o(e,"P",{"data-svelte-h":!0}),i(m)!=="svelte-1u43pqo"&&(m.textContent=Ze),se=p(e),f=o(e,"P",{"data-svelte-h":!0}),i(f)!=="svelte-1374mlo"&&(f.innerHTML=De),ne=p(e),h=o(e,"P",{"data-svelte-h":!0}),i(h)!=="svelte-165yzw0"&&(h.textContent=Ge),ae=p(e),v=o(e,"P",{"data-svelte-h":!0}),i(v)!=="svelte-52r4cc"&&(v.innerHTML=Ne),oe=p(e),x=o(e,"H2",{"data-svelte-h":!0}),i(x)!=="svelte-plbtc7"&&(x.textContent=Xe),le=p(e),w=o(e,"P",{"data-svelte-h":!0}),i(w)!=="svelte-mxaqqi"&&(w.innerHTML=Ye),pe=p(e),b=o(e,"P",{"data-svelte-h":!0}),i(b)!=="svelte-150t1rj"&&(b.innerHTML=Qe),ie=p(e),y=o(e,"P",{"data-svelte-h":!0}),i(y)!=="svelte-186goe0"&&(y.innerHTML=$e),ce=p(e),C=o(e,"PRE",{class:!0});var s=G(C);ue=N(s,!1),s.forEach(t),re=p(e),_=o(e,"H2",{"data-svelte-h":!0}),i(_)!=="svelte-kt6rw9"&&(_.textContent=et),de=p(e),L=o(e,"P",{"data-svelte-h":!0}),i(L)!=="svelte-1sxl4ya"&&(L.innerHTML=tt),ke=p(e),H=o(e,"PRE",{class:!0});var wt=G(H);me=N(wt,!1),wt.forEach(t),fe=p(e),T=o(e,"P",{"data-svelte-h":!0}),i(T)!=="svelte-1bkffhx"&&(T.textContent=st),he=p(e),S=o(e,"H3",{"data-svelte-h":!0}),i(S)!=="svelte-1kpkpjp"&&(S.innerHTML=nt),ve=p(e),R=o(e,"P",{"data-svelte-h":!0}),i(R)!=="svelte-1ttvmki"&&(R.innerHTML=at),xe=p(e),P=o(e,"P",{"data-svelte-h":!0}),i(P)!=="svelte-1gwjwtd"&&(P.innerHTML=ot),we=p(e),M=o(e,"PRE",{class:!0});var bt=G(M);be=N(bt,!1),bt.forEach(t),ye=p(e),g=o(e,"P",{"data-svelte-h":!0}),i(g)!=="svelte-4irlao"&&(g.innerHTML=lt),Ce=p(e),j=o(e,"PRE",{class:!0});var yt=G(j);_e=N(yt,!1),yt.forEach(t),Le=p(e),J=o(e,"H2",{"data-svelte-h":!0}),i(J)!=="svelte-1uyjkwl"&&(J.textContent=pt),He=p(e),V=o(e,"P",{"data-svelte-h":!0}),i(V)!=="svelte-6wjk19"&&(V.textContent=it),Te=p(e),z=o(e,"PRE",{class:!0});var Ct=G(z);Se=N(Ct,!1),Ct.forEach(t),Re=p(e),E=o(e,"H2",{"data-svelte-h":!0}),i(E)!=="svelte-3975wq"&&(E.textContent=ct),Pe=p(e),F=o(e,"P",{"data-svelte-h":!0}),i(F)!=="svelte-gka8td"&&(F.innerHTML=ut),Me=p(e),q=o(e,"PRE",{class:!0});var _t=G(q);ge=N(_t,!1),_t.forEach(t),je=p(e),O=o(e,"P",{"data-svelte-h":!0}),i(O)!=="svelte-rlnrsi"&&(O.innerHTML=rt),Je=p(e),A=o(e,"H3",{"data-svelte-h":!0}),i(A)!=="svelte-plo88p"&&(A.innerHTML=dt),Ve=p(e),I=o(e,"P",{"data-svelte-h":!0}),i(I)!=="svelte-eadsp6"&&(I.innerHTML=kt),ze=p(e),B=o(e,"UL",{"data-svelte-h":!0}),i(B)!=="svelte-18sy8y4"&&(B.innerHTML=mt),Ee=p(e),W=o(e,"H2",{"data-svelte-h":!0}),i(W)!=="svelte-1ibsc2p"&&(W.textContent=ft),Fe=p(e),U=o(e,"P",{"data-svelte-h":!0}),i(U)!=="svelte-p62h35"&&(U.textContent=ht),qe=p(e),K=o(e,"P",{"data-svelte-h":!0}),i(K)!=="svelte-10oyolp"&&(K.textContent=vt),Oe=p(e),Z=o(e,"UL",{"data-svelte-h":!0}),i(Z)!=="svelte-1bjrcnl"&&(Z.innerHTML=xt),this.h()},h(){ue.a=null,X(C,"class","language-typescript"),me.a=null,X(H,"class","language-typescript"),be.a=null,X(M,"class","language-typescript"),_e.a=null,X(j,"class","language-typescript"),Se.a=null,X(z,"class","language-typescript"),ge.a=null,X(q,"class","language-typescript")},m(e,s){n(e,c,s),n(e,Y,s),n(e,u,s),n(e,Q,s),n(e,r,s),n(e,$,s),n(e,d,s),n(e,ee,s),n(e,k,s),n(e,te,s),n(e,m,s),n(e,se,s),n(e,f,s),n(e,ne,s),n(e,h,s),n(e,ae,s),n(e,v,s),n(e,oe,s),n(e,x,s),n(e,le,s),n(e,w,s),n(e,pe,s),n(e,b,s),n(e,ie,s),n(e,y,s),n(e,ce,s),n(e,C,s),ue.m(Ht,C),n(e,re,s),n(e,_,s),n(e,de,s),n(e,L,s),n(e,ke,s),n(e,H,s),me.m(Tt,H),n(e,fe,s),n(e,T,s),n(e,he,s),n(e,S,s),n(e,ve,s),n(e,R,s),n(e,xe,s),n(e,P,s),n(e,we,s),n(e,M,s),be.m(St,M),n(e,ye,s),n(e,g,s),n(e,Ce,s),n(e,j,s),_e.m(Rt,j),n(e,Le,s),n(e,J,s),n(e,He,s),n(e,V,s),n(e,Te,s),n(e,z,s),Se.m(Pt,z),n(e,Re,s),n(e,E,s),n(e,Pe,s),n(e,F,s),n(e,Me,s),n(e,q,s),ge.m(Mt,q),n(e,je,s),n(e,O,s),n(e,Je,s),n(e,A,s),n(e,Ve,s),n(e,I,s),n(e,ze,s),n(e,B,s),n(e,Ee,s),n(e,W,s),n(e,Fe,s),n(e,U,s),n(e,qe,s),n(e,K,s),n(e,Oe,s),n(e,Z,s)},p:Ae,i:Ae,o:Ae,d(e){e&&(t(c),t(Y),t(u),t(Q),t(r),t($),t(d),t(ee),t(k),t(te),t(m),t(se),t(f),t(ne),t(h),t(ae),t(v),t(oe),t(x),t(le),t(w),t(pe),t(b),t(ie),t(y),t(ce),t(C),t(re),t(_),t(de),t(L),t(ke),t(H),t(fe),t(T),t(he),t(S),t(ve),t(R),t(xe),t(P),t(we),t(M),t(ye),t(g),t(Ce),t(j),t(Le),t(J),t(He),t(V),t(Te),t(z),t(Re),t(E),t(Pe),t(F),t(Me),t(q),t(je),t(O),t(Je),t(A),t(Ve),t(I),t(ze),t(B),t(Ee),t(W),t(Fe),t(U),t(qe),t(K),t(Oe),t(Z))}}}const Ft={layout:"post",title:"What’s New in RxJS 7&#58; Small Bundles and Big Changes to share",date:"2021-06-02T00:00:00.000Z",keywords:"javascript, typescript, rxjs",image:"rxjs-logo.png"};class qt extends jt{constructor(c){super(),Jt(this,c,null,Vt,gt,{})}}export{qt as default,Ft as metadata};
