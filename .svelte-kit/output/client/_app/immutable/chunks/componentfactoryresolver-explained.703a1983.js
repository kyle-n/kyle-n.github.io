import{s as Qa,n as Gn}from"./scheduler.63274e7e.js";import{S as Za,i as Ga,g as e,s as o,H as u,h as p,x as l,c,j as i,A as k,f as a,k as r,a as t}from"./index.9f372ec1.js";function Ja(ja){let m,Jn="If you work with any component-based framework long enough, you’ll run into a problem. How do you share functionality across components?",X,d,Kn="Angular gives us many options. You can share logic in services, child components or directives. However, sometimes these options are not enough. A directive can only modify an element, a service cannot display content, and a child component should not modify its parent.",$,h,Xn='Sometimes, the best option is to build a <a href="https://reactjs.org/docs/higher-order-components.html" rel="nofollow">higher-order component</a>. A higher-order component accepts another component as its input and “wraps” it. This is a common pattern in React and a great way to share logic across components without burdening them with extra service dependencies or logic.',nn,w,$n="With a little help from <code>ComponentFactoryResolver</code>, we can do this in Angular too.",an,f,na="Why use ComponentFactoryResolver?",sn,g,aa="Imagine you’re creating a dashboard with two tables, each with a different layout. As indicated below, the top table is for transactions, and the bottom table is for users.",tn,v,sa='<img src="/static/img/transaction-table.png" alt="A screenshot of a table showing two transactions. It has columns for transaction ID, amount and details"/>',en,y,ta='<img src="/static/img/user-table.png" alt="A screenshot of a table showing two users. It has columns for user name and salary"/>',pn,b,ea="The <strong>transactions table</strong> has checkboxes and three columns showing a number, currency and date, respectively. While the <strong>user table</strong> also has a checkbox, it displays only two additional columns, the first rendering a string and the second a currency value. ",on,C,pa="On one hand, the checkbox logic for each table is the same and should be shared. On the other, how would you reconcile two radically different row layouts?",cn,x,oa="You could toggle between them with a switch statement, but the code would messy, large, and unreadable. And that’s before adding more columns in the future.",ln,_,ca="What we should do instead is create a higher-order checkbox table component that accepts a row component class as its input. This is how simple our final API will be:",un,R,kn,Aa=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-selectable-table</span> 
  <span class="token attr-name">[items]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactions<span class="token punctuation">"</span></span>
  <span class="token attr-name">[rowComponent]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TransactionRowComponent<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-selectable-table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css">...</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-selectable-table</span>
  <span class="token attr-name">[items]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span>
  <span class="token attr-name">[rowComponent]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserRowComponent<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-selectable-table</span><span class="token punctuation">></span></span></code>`,rn,T,la="<code>ComponentFactoryResolver</code> will let us write our checkbox logic once and dynamically render row components at runtime. ",mn,H,ua="Creating the Component UsingComponentFactoryResolver and ViewContainerRef",dn,P,ia='The table will create instances of our row component and render them into a <code>ViewContainerRef</code>s attached to <code>&lt;tr&gt;</code>s in our template. A <code>ViewContainerRef</code> is a container where one or more views can be attached, resulting in a <a href="https://angular.io/api/core/ViewContainerRef#description" title="https://angular.io/api/core/ViewContainerRef#description" rel="nofollow"><em>host views</em></a><em>. </em>A host view is a view for the component containing its data. This is how Angular creates and renders components behind the scenes.',hn,E,ka="To return to our table example, we will pass in two inputs: the row component class and an array of items to render.",wn,L,fn,qa=`<code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> items<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Identifiable<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> rowComponent<span class="token operator">:</span> SelectableTableRowComponent<span class="token punctuation">;</span></code>`,gn,M,ra="We will inject our row component into the <code>ViewContainerRef</code> of each <code>&lt;tr&gt;</code>. Each row will display one item.",vn,V,yn,Ia=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let header of rowComponent.tableHeaders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          &#123;&#123;header&#125;&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbodv</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">#selectableRow</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let item of items<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div-table-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,bn,F,Cn,Sa=`<code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChildren</span></span><span class="token punctuation">(</span><span class="token string">'selectableRow'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> read<span class="token operator">:</span> ViewContainerRef <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> rowTemplates<span class="token operator">:</span> QueryList<span class="token operator">&lt;</span>ViewContainerRef<span class="token operator">></span><span class="token punctuation">;</span></code>`,xn,j,ma="We will inject our row component into the <code>ViewContainerRef</code> of each <code>&lt;tr&gt;</code>. Each row will display one item.The <code>ComponentFactoryResolver</code> will resolve a factory for making <code>rowComponent</code>instances. We will then assign the <code>items</code> of the table to <code>instance.item</code>. Finally, using the instance of the global Angular project, we will render the row component instance onto the page.",_n,A,Rn,Wa=`<code class="language-typescript"><span class="token keyword">const</span> rowComponentFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_componentFactoryResolver<span class="token punctuation">.</span><span class="token function">resolveComponentFactory</span><span class="token punctuation">(</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>rowComponent
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> componentRef <span class="token operator">=</span> rowComponentFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
  <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  template<span class="token punctuation">.</span>element<span class="token punctuation">.</span>nativeElement
<span class="token punctuation">)</span><span class="token punctuation">;</span>
componentRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_applicationRef<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span>componentRef<span class="token punctuation">.</span>hostView<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Tn,q,da="Content Projection",Hn,I,ha="Our table can now render the row components needed to display users and transactions. Now we need to display the checkboxes using <code>ngContent</code> inside our user row component.",Pn,S,En,za=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>&#123;&#123; item.name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123; item.pay | currency &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code>`,Ln,W,wa="Back in the table component, make a <code>&lt;td&gt;</code>. You will inject the checkbox component into the <code>&lt;td&gt;</code>.",Mn,z,Vn,Na=`<code class="language-typescript"><span class="token keyword">const</span> checkboxTd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>'td"<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> checkboxRef <span class="token operator">=</span> checkboxFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
  <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  checkboxTd
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Fn,N,fa="We will need some logic to know if the checkbox is checked.",jn,U,An,Ua=`<code class="language-typescript"><span class="token keyword">const</span> itemId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
checkboxRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>formControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemsSelected<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  itemId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">as</span> FormControl<span class="token punctuation">;</span>
checkboxRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>itemId<span class="token punctuation">)</span><span class="token punctuation">;</span>
checkboxRef<span class="token punctuation">.</span>hostView<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,qn,Y,ga="We now pass the checkbox as the second parameter for <code>projectableNodes</code>.",In,D,Sn,Ya=`<code class="language-typescript"><span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_componentFactoryResolver<span class="token punctuation">.</span><span class="token function">resolveComponentFactory</span><span class="token punctuation">(</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>rowComponent
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> componentRef <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>checkboxTd<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token punctuation">.</span>element<span class="token punctuation">.</span>nativeElement
<span class="token punctuation">)</span><span class="token punctuation">;</span>
componentRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_applicationRef<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span>componentRef<span class="token punctuation">.</span>hostView<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Wn,O,va="Putting this all together, we will have this block of code.",zn,B,Nn,Da=`<code class="language-typescript">templates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>template<span class="token operator">:</span> ViewContainerRef<span class="token punctuation">,</span> i<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> checkboxTd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> checkboxRef <span class="token operator">=</span> checkboxFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
    template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
    <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    checkboxTd
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> itemId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
  checkboxRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>formControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemsSelected<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
    itemId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token keyword">as</span> FormControl<span class="token punctuation">;</span>
  checkboxRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>itemId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  checkboxRef<span class="token punctuation">.</span>hostView<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_componentFactoryResolver<span class="token punctuation">.</span><span class="token function">resolveComponentFactory</span><span class="token punctuation">(</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rowComponent
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> componentRef <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
    template<span class="token punctuation">.</span>injector<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>checkboxTd<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    template<span class="token punctuation">.</span>element<span class="token punctuation">.</span>nativeElement
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  componentRef<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_applicationRef<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span>componentRef<span class="token punctuation">.</span>hostView<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Un,Q,ya="The result of all this is our table that we can plug into and use throughout our application using <code>ComponentFactoryResolver</code>.",Yn,Z,Dn,Oa=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-selectable-table</span> 
  <span class="token attr-name">[items]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactions<span class="token punctuation">"</span></span>
  <span class="token attr-name">[rowComponent]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TransactionRowComponent<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-selectable-table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css">...</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-selectable-table</span>
  <span class="token attr-name">[items]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span>
  <span class="token attr-name">[rowComponent]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserRowComponent<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-selectable-table</span><span class="token punctuation">></span></span></code>`,On,G,ba="Using ComponentFactoryResolver in Angular 13",Bn,J,Ca="Angular 13 and newer no longer requires component factories. You can just inject an instance of a component class directly into a <code>ViewContainerRef</code>.",Qn,K,Zn,Ba=`<code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">,</span> ViewChild<span class="token punctuation">,</span> ViewContainerRef<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>SelectableTableRowCheckboxComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../selectable-table-row-checkbox/selectable-table-row-checkbox.component'</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-factory-example'</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token string">'&lt;button (click)="add()">Add checkbox&lt;/button>&lt;ng-container #container>&lt;/ng-container>'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FactoryExampleComponent</span> <span class="token punctuation">&#123;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>read<span class="token operator">:</span> ViewContainerRef<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> container<span class="token operator">:</span> ViewContainerRef<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> componentRef <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>SelectableTableRowCheckboxComponent
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){m=e("p"),m.textContent=Jn,X=o(),d=e("p"),d.textContent=Kn,$=o(),h=e("p"),h.innerHTML=Xn,nn=o(),w=e("p"),w.innerHTML=$n,an=o(),f=e("h2"),f.textContent=na,sn=o(),g=e("p"),g.textContent=aa,tn=o(),v=e("p"),v.innerHTML=sa,en=o(),y=e("p"),y.innerHTML=ta,pn=o(),b=e("p"),b.innerHTML=ea,on=o(),C=e("p"),C.textContent=pa,cn=o(),x=e("p"),x.textContent=oa,ln=o(),_=e("p"),_.textContent=ca,un=o(),R=e("pre"),kn=new u(!1),rn=o(),T=e("p"),T.innerHTML=la,mn=o(),H=e("h2"),H.textContent=ua,dn=o(),P=e("p"),P.innerHTML=ia,hn=o(),E=e("p"),E.textContent=ka,wn=o(),L=e("pre"),fn=new u(!1),gn=o(),M=e("p"),M.innerHTML=ra,vn=o(),V=e("pre"),yn=new u(!1),bn=o(),F=e("pre"),Cn=new u(!1),xn=o(),j=e("p"),j.innerHTML=ma,_n=o(),A=e("pre"),Rn=new u(!1),Tn=o(),q=e("h2"),q.textContent=da,Hn=o(),I=e("p"),I.innerHTML=ha,Pn=o(),S=e("pre"),En=new u(!1),Ln=o(),W=e("p"),W.innerHTML=wa,Mn=o(),z=e("pre"),Vn=new u(!1),Fn=o(),N=e("p"),N.textContent=fa,jn=o(),U=e("pre"),An=new u(!1),qn=o(),Y=e("p"),Y.innerHTML=ga,In=o(),D=e("pre"),Sn=new u(!1),Wn=o(),O=e("p"),O.textContent=va,zn=o(),B=e("pre"),Nn=new u(!1),Un=o(),Q=e("p"),Q.innerHTML=ya,Yn=o(),Z=e("pre"),Dn=new u(!1),On=o(),G=e("h2"),G.textContent=ba,Bn=o(),J=e("p"),J.innerHTML=Ca,Qn=o(),K=e("pre"),Zn=new u(!1),this.h()},l(n){m=p(n,"P",{"data-svelte-h":!0}),l(m)!=="svelte-138kwrz"&&(m.textContent=Jn),X=c(n),d=p(n,"P",{"data-svelte-h":!0}),l(d)!=="svelte-1grz76d"&&(d.textContent=Kn),$=c(n),h=p(n,"P",{"data-svelte-h":!0}),l(h)!=="svelte-17905ez"&&(h.innerHTML=Xn),nn=c(n),w=p(n,"P",{"data-svelte-h":!0}),l(w)!=="svelte-1vu00h0"&&(w.innerHTML=$n),an=c(n),f=p(n,"H2",{"data-svelte-h":!0}),l(f)!=="svelte-ghgwjv"&&(f.textContent=na),sn=c(n),g=p(n,"P",{"data-svelte-h":!0}),l(g)!=="svelte-f974ev"&&(g.textContent=aa),tn=c(n),v=p(n,"P",{"data-svelte-h":!0}),l(v)!=="svelte-i6uo06"&&(v.innerHTML=sa),en=c(n),y=p(n,"P",{"data-svelte-h":!0}),l(y)!=="svelte-1k3r2z5"&&(y.innerHTML=ta),pn=c(n),b=p(n,"P",{"data-svelte-h":!0}),l(b)!=="svelte-iny8h1"&&(b.innerHTML=ea),on=c(n),C=p(n,"P",{"data-svelte-h":!0}),l(C)!=="svelte-vexz1n"&&(C.textContent=pa),cn=c(n),x=p(n,"P",{"data-svelte-h":!0}),l(x)!=="svelte-3qx1p5"&&(x.textContent=oa),ln=c(n),_=p(n,"P",{"data-svelte-h":!0}),l(_)!=="svelte-1w3vb6u"&&(_.textContent=ca),un=c(n),R=p(n,"PRE",{class:!0});var s=i(R);kn=k(s,!1),s.forEach(a),rn=c(n),T=p(n,"P",{"data-svelte-h":!0}),l(T)!=="svelte-1cyifv"&&(T.innerHTML=la),mn=c(n),H=p(n,"H2",{"data-svelte-h":!0}),l(H)!=="svelte-ic14yu"&&(H.textContent=ua),dn=c(n),P=p(n,"P",{"data-svelte-h":!0}),l(P)!=="svelte-jp5pwj"&&(P.innerHTML=ia),hn=c(n),E=p(n,"P",{"data-svelte-h":!0}),l(E)!=="svelte-zcwo06"&&(E.textContent=ka),wn=c(n),L=p(n,"PRE",{class:!0});var xa=i(L);fn=k(xa,!1),xa.forEach(a),gn=c(n),M=p(n,"P",{"data-svelte-h":!0}),l(M)!=="svelte-vpixf1"&&(M.innerHTML=ra),vn=c(n),V=p(n,"PRE",{class:!0});var _a=i(V);yn=k(_a,!1),_a.forEach(a),bn=c(n),F=p(n,"PRE",{class:!0});var Ra=i(F);Cn=k(Ra,!1),Ra.forEach(a),xn=c(n),j=p(n,"P",{"data-svelte-h":!0}),l(j)!=="svelte-57tc65"&&(j.innerHTML=ma),_n=c(n),A=p(n,"PRE",{class:!0});var Ta=i(A);Rn=k(Ta,!1),Ta.forEach(a),Tn=c(n),q=p(n,"H2",{"data-svelte-h":!0}),l(q)!=="svelte-14jdfpg"&&(q.textContent=da),Hn=c(n),I=p(n,"P",{"data-svelte-h":!0}),l(I)!=="svelte-1gnf4f1"&&(I.innerHTML=ha),Pn=c(n),S=p(n,"PRE",{class:!0});var Ha=i(S);En=k(Ha,!1),Ha.forEach(a),Ln=c(n),W=p(n,"P",{"data-svelte-h":!0}),l(W)!=="svelte-1l310cp"&&(W.innerHTML=wa),Mn=c(n),z=p(n,"PRE",{class:!0});var Pa=i(z);Vn=k(Pa,!1),Pa.forEach(a),Fn=c(n),N=p(n,"P",{"data-svelte-h":!0}),l(N)!=="svelte-1prvjee"&&(N.textContent=fa),jn=c(n),U=p(n,"PRE",{class:!0});var Ea=i(U);An=k(Ea,!1),Ea.forEach(a),qn=c(n),Y=p(n,"P",{"data-svelte-h":!0}),l(Y)!=="svelte-u1jlo9"&&(Y.innerHTML=ga),In=c(n),D=p(n,"PRE",{class:!0});var La=i(D);Sn=k(La,!1),La.forEach(a),Wn=c(n),O=p(n,"P",{"data-svelte-h":!0}),l(O)!=="svelte-1iji6b"&&(O.textContent=va),zn=c(n),B=p(n,"PRE",{class:!0});var Ma=i(B);Nn=k(Ma,!1),Ma.forEach(a),Un=c(n),Q=p(n,"P",{"data-svelte-h":!0}),l(Q)!=="svelte-17btork"&&(Q.innerHTML=ya),Yn=c(n),Z=p(n,"PRE",{class:!0});var Va=i(Z);Dn=k(Va,!1),Va.forEach(a),On=c(n),G=p(n,"H2",{"data-svelte-h":!0}),l(G)!=="svelte-uktws0"&&(G.textContent=ba),Bn=c(n),J=p(n,"P",{"data-svelte-h":!0}),l(J)!=="svelte-1hwv03"&&(J.innerHTML=Ca),Qn=c(n),K=p(n,"PRE",{class:!0});var Fa=i(K);Zn=k(Fa,!1),Fa.forEach(a),this.h()},h(){kn.a=null,r(R,"class","language-html"),fn.a=null,r(L,"class","language-typescript"),yn.a=null,r(V,"class","language-html"),Cn.a=null,r(F,"class","language-typescript"),Rn.a=null,r(A,"class","language-typescript"),En.a=null,r(S,"class","language-html"),Vn.a=null,r(z,"class","language-typescript"),An.a=null,r(U,"class","language-typescript"),Sn.a=null,r(D,"class","language-typescript"),Nn.a=null,r(B,"class","language-typescript"),Dn.a=null,r(Z,"class","language-html"),Zn.a=null,r(K,"class","language-typescript")},m(n,s){t(n,m,s),t(n,X,s),t(n,d,s),t(n,$,s),t(n,h,s),t(n,nn,s),t(n,w,s),t(n,an,s),t(n,f,s),t(n,sn,s),t(n,g,s),t(n,tn,s),t(n,v,s),t(n,en,s),t(n,y,s),t(n,pn,s),t(n,b,s),t(n,on,s),t(n,C,s),t(n,cn,s),t(n,x,s),t(n,ln,s),t(n,_,s),t(n,un,s),t(n,R,s),kn.m(Aa,R),t(n,rn,s),t(n,T,s),t(n,mn,s),t(n,H,s),t(n,dn,s),t(n,P,s),t(n,hn,s),t(n,E,s),t(n,wn,s),t(n,L,s),fn.m(qa,L),t(n,gn,s),t(n,M,s),t(n,vn,s),t(n,V,s),yn.m(Ia,V),t(n,bn,s),t(n,F,s),Cn.m(Sa,F),t(n,xn,s),t(n,j,s),t(n,_n,s),t(n,A,s),Rn.m(Wa,A),t(n,Tn,s),t(n,q,s),t(n,Hn,s),t(n,I,s),t(n,Pn,s),t(n,S,s),En.m(za,S),t(n,Ln,s),t(n,W,s),t(n,Mn,s),t(n,z,s),Vn.m(Na,z),t(n,Fn,s),t(n,N,s),t(n,jn,s),t(n,U,s),An.m(Ua,U),t(n,qn,s),t(n,Y,s),t(n,In,s),t(n,D,s),Sn.m(Ya,D),t(n,Wn,s),t(n,O,s),t(n,zn,s),t(n,B,s),Nn.m(Da,B),t(n,Un,s),t(n,Q,s),t(n,Yn,s),t(n,Z,s),Dn.m(Oa,Z),t(n,On,s),t(n,G,s),t(n,Bn,s),t(n,J,s),t(n,Qn,s),t(n,K,s),Zn.m(Ba,K)},p:Gn,i:Gn,o:Gn,d(n){n&&(a(m),a(X),a(d),a($),a(h),a(nn),a(w),a(an),a(f),a(sn),a(g),a(tn),a(v),a(en),a(y),a(pn),a(b),a(on),a(C),a(cn),a(x),a(ln),a(_),a(un),a(R),a(rn),a(T),a(mn),a(H),a(dn),a(P),a(hn),a(E),a(wn),a(L),a(gn),a(M),a(vn),a(V),a(bn),a(F),a(xn),a(j),a(_n),a(A),a(Tn),a(q),a(Hn),a(I),a(Pn),a(S),a(Ln),a(W),a(Mn),a(z),a(Fn),a(N),a(jn),a(U),a(qn),a(Y),a(In),a(D),a(Wn),a(O),a(zn),a(B),a(Un),a(Q),a(Yn),a(Z),a(On),a(G),a(Bn),a(J),a(Qn),a(K))}}}const $a={layout:"post",title:"How ComponentFactoryResolver can unlock powerful higher-order components",date:"2022-06-30T00:00:00.000Z",keywords:"javascript, typescript, angular, frontend",image:"factory.png",caption:"Via ArtsyBee on Pixabay"};class ns extends Za{constructor(m){super(),Ga(this,m,null,Ja,Qa,{})}}export{ns as default,$a as metadata};
